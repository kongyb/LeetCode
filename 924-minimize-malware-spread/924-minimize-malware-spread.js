/**
 * @param {number[][]} graph
 * @param {number[]} initial
 * @return {number}
 */
function findConnectedNode(graph,start,pointMap){
    let isChecked=new Array(graph.length).fill(false)
    isChecked[start]=true
    let queue=[]
    graph[start].forEach((val,index)=>{
        if(val===1&&!isChecked[index]){
            isChecked[index]=true
            queue.push(index)
        }
    })
    while(queue.length>0){
        let index=queue.shift()
        pointMap[index].push(start)
        graph[index].forEach((val,index)=>{
            if(val===1&&!isChecked[index]){
                isChecked[index]=true
                queue.push(index)
            }
        })
    }
}

var minMalwareSpread = function(graph, initial) {
    let pointMap={}
    let isInitial=new Array(graph.length).fill(false)
    initial.forEach((val)=>{
        isInitial[val]=true
    })
    for(let i=0;i<graph.length;i++){
        pointMap[i]=[]
    }
    initial.sort((a,b)=>a-b)
    let cntObj={}
    for(const start of initial){
        cntObj[start]=0
        findConnectedNode(graph,start,pointMap)
    }
    for(const key in pointMap){
        if(isInitial[key]&&pointMap[key].length===0){
            cntObj[key]++
        }
        if(!isInitial[key]&&pointMap[key].length===1){
            cntObj[pointMap[key][0]]++
        }
    }
    let result=initial[0]
    let cnt=0
    for(const key in cntObj){
        if(cntObj[key]>cnt){
            result=key
            cnt=cntObj[key]
        }
    }
    return result
};